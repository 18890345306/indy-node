#!groovy

@Library('SovrinHelpers') _

def name = 'indy-node'

def nodeTestUbuntu = {
    try {
        echo 'Ubuntu Test: Checkout csm'
        checkout scm

        echo 'Ubuntu Test: Build docker image'
        def testEnv = dockerHelpers.build(name)

        testEnv.inside('--network host') {
            echo 'Ubuntu Test: Install dependencies'
            testHelpers.install()

            echo 'Ubuntu Test: Test'
            testHelpers.testRunner([resFile: "test-result-node.${NODE_NAME}.txt", testDir: 'indy_node'])
            //testHelpers.testJUnit(resFile: "test-result-node.${NODE_NAME}.xml")
        }
    }
    finally {
        echo 'Ubuntu Test: Cleanup'
        step([$class: 'WsCleanup'])
    }
}

def commonTestUbuntu = {
    try {
        echo 'Ubuntu Test: Checkout csm'
        checkout scm

        echo 'Ubuntu Test: Build docker image'
        def testEnv = dockerHelpers.build(name)

        testEnv.inside {
            echo 'Ubuntu Test: Install dependencies'
            testHelpers.install()

            echo 'Ubuntu Test: Test'
            testHelpers.testJUnit([resFile: "test-result-common.${NODE_NAME}.xml", testDir: 'indy_common'])
        }
    }
    finally {
        echo 'Ubuntu Test: Cleanup'
        step([$class: 'WsCleanup'])
    }
}

def buildDebUbuntu = { repoName, releaseVersion, sourcePath ->
    def volumeName = "$name-deb-u1604"
    if (env.BRANCH_NAME != '' && env.BRANCH_NAME != 'master') {
        volumeName = "${volumeName}.${BRANCH_NAME}"
    }
    if (sh(script: "docker volume ls -q | grep -q '^$volumeName\$'", returnStatus: true) == 0) {
        sh "docker volume rm $volumeName"
    }
    dir('build-scripts/ubuntu-1604') {
        sh "./build-$name-docker.sh \"$sourcePath\" $releaseVersion $volumeName"
        sh "./build-3rd-parties-docker.sh $volumeName"
    }
    return "$volumeName"
}

def systemTests = { releaseVersion ->
    node("ubuntu") {
        try {
            dir("environment/docker/pool"){ 
                stage("Prepare pool") {
                    // TODO: add indy version to Dockerfile
                    sh '''sed -i 's/\\(RUN pip3 install python3-indy\\)/& pytest/g' core.ubuntu.dockerfile'''
                }
                
                stage("Run pool") {
                    sh script: '''./pool_start.sh 25'''
                    
                    echo "Running nodes: "
                    pool_nodes = sh(script: 'docker ps', returnStdout: true)
                    echo pool_nodes
                }
            
                stage("Prepare client") {
                    sh script: '''sed -i 's/\\(docker exec -it\\)/#&/g' client_start.sh'''
                }
                
                stage("Run client") {
                    sh script: '''./client_for_pool_start.sh'''
                }
            } //end dir
            
            stage("Prepare System Tests") {
                testHelpers.getSystemTests(targetDir: './system_tests')
            }

            stage("Copy tests and genesis to the client") {
                sh '''docker cp ./system_tests/system indyclient:/home/indy'''
                sh '''docker cp node1:/var/lib/indy/sandbox/pool_transactions_genesis ./docker_genesis'''
                sh '''docker cp ./docker_genesis indyclient:/home/indy/system/docker_genesis'''
            }
            
            stage("Run tests") {
                try {
                    dir("environment/docker/pool"){
                        sh '''docker exec -t --user indy indyclient bash -c "cd /home/indy/system && pytest --junit-xml=./reports/system_tests_ledger_report.xml test_ledger.py" '''
                    }
                }
                catch (Exception exc) {
                    continue
                }
            }
            
            stage("Prepare reports") {
                sh '''mkdir -p system_tests/reports'''

                dir("system_tests/reports"){
                    sh '''docker cp indyclient:/home/indy/system/reports/system_tests_ledger_report.xml ./'''
                }
            }
            
            stage("Upload reports") {
                dir("system_tests/reports"){    
                    archiveArtifacts artifacts: '*.xml', onlyIfSuccessful: true
                    junit healthScaleFactor: 0.0, keepLongStdio: true, testResults: '*.xml'
                }
            }
        } 

        catch (Exception exc) {
            echo "Catch the exception ${exc.getMessage()}"
            echo "Stack trace:"
            echo "{exc.getStackTrace()}"
        }
            
        finally {
            sh '''docker stop $(docker ps -a -q)'''
            sh '''docker network rm pool-network'''
        }
    }
}

options = new TestAndPublishOptions()

// FIXME: Remove after tests
options.skips([
    StagesEnum.IS_TESTED, 
    StagesEnum.STATIC_CODE_VALIDATION, 
    StagesEnum.TEST, 
    StagesEnum.AUTOMERGE, 
    StagesEnum.GET_RELEASE_VERSION, 
    StagesEnum.PYPI_RELEASE,
    StagesEnum.PACK_RELEASE, 
    StagesEnum.PACK_RELEASE_COPY, 
    StagesEnum.GITHUB_RELEASE,
    StagesEnum.QA_NOTIF, 
    StagesEnum.QA_APPROVAL, 
    StagesEnum.PRODUCT_NOTIF, 
    StagesEnum.PRODUCT_APPROVAL, 
    StagesEnum.TGB_NOTIF, 
    StagesEnum.TGB_APPROVAL, 
    StagesEnum.PACK_RELEASE_ST,
    StagesEnum.PACK_RELEASE_COPY_ST, 
    StagesEnum.GITHUB_RELEASE_ST, 
    StagesEnum.POOL_UPDATE_NOTIF, 
    StagesEnum.BUILD_RESULT_NOTIF,
    ])

options.enable([StagesEnum.PACK_RELEASE_COPY, StagesEnum.PACK_RELEASE_COPY_ST])
options.setCopyWithDeps(true)
options.setSystemTestsCb(systemTests)
options.setPrContexts([env.INDY_GITHUB_PR_REQUIRED_CONTEXT ?: "ci/hyperledger-jenkins/pr-merge"])
testAndPublish(name, [ubuntu: [node: nodeTestUbuntu, common: commonTestUbuntu]], true, options, [ubuntu: buildDebUbuntu])
