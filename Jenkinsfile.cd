#!/usr/bin/env groovy

def name = 'indy-node'

env.indyNodeLabel = 'ubuntu'
env.indyPRStatusContext = 'ci/hyperledger-jenkins/pr-merge'

env.evernymApprovers = 'ME:TEST_APPROVER'
env.TEST_APPROVER = 'andrey.kononykhin@dsr-corporation.com andkononykhin@gmail.com'
env.evernymRecipientProviders = 'RequesterRecipientProvider'
env.FAILED_BUILD_RECIPIENTS = 'andrey.kononykhin@dsr-corporation.com'
env.SUCCESS_BUILD_RECIPIENTS = 'andrey.kononykhin@dsr-corporation.com'
env.INDY_NODE_SUCCESS_BUILD_RECIPIENTS = 'andrey.kononykhin@dsr-corporation.com'
env.indyGitHubTokenCredId = 'evernym-github-machine-user-token'

env.BRANCH_NAME = 'stable'
env.SOVRIN_CORE_REPO_NAME = 'test'
env.SOVRIN_SDK_REPO_NAME = 'test''

labels = [
    linux: params.INDY_AGENT_LINUX_DOCKER_LABEL ?: 'linux'
]

def locallib
stage('Load local lib') {
    node(labels.linux) {
        checkout scm
        locallib = load 'pipeline.groovy'
    }
}

locallib.loadIndyLib('evernym-github-machine-user')

def config = locallib.init()
def indyConfig = indyConfig()
indyLogger.info("parameters: local $config, indyConfig: $indyConfig")

// PIPELINE
indyPipeline {
    timeout = 90

    onFail = { err ->
        println(err.toString())
    }
    onSuccess = {
        "Success"
    }

    stages = [
        ['indyIsTested', {}],
        ['indyVerifyStatic', {}],
        ['indyVerify', {
            labels = this.labels.collect {k, v -> v}
            dockers = config.dockers
            tests = config.tests
        }],
        ['indyPublish', {
            packageName = this.name
            releaseVersion = "0.0.0.${this.env.BUILD_NUMBER}" // XXX TODO FIXME
            builders.deb = locallib.buildDebUbuntu
        }]
    ]
}
