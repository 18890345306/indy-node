#!groovy

@Library('SovrinHelpers') _

def name = 'indy-node'

def nodeTestUbuntu = {
    try {
        echo 'Ubuntu Test: Checkout csm'
        checkout scm

        echo 'Ubuntu Test: Build docker image'
        def testEnv = dockerHelpers.build(name)

        testEnv.inside('--network host') {
            echo 'Ubuntu Test: Install dependencies'
            testHelpers.install()

            echo 'Ubuntu Test: Test'
            testHelpers.testRunner([resFile: "test-result-node.${NODE_NAME}.txt", testDir: 'indy_node'])
            //testHelpers.testJUnit(resFile: "test-result-node.${NODE_NAME}.xml")
        }
    }
    finally {
        echo 'Ubuntu Test: Cleanup'
        step([$class: 'WsCleanup'])
    }
}

def commonTestUbuntu = {
    try {
        echo 'Ubuntu Test: Checkout csm'
        checkout scm

        echo 'Ubuntu Test: Build docker image'
        def testEnv = dockerHelpers.build(name)

        testEnv.inside {
            echo 'Ubuntu Test: Install dependencies'
            testHelpers.install()

            echo 'Ubuntu Test: Test'
            testHelpers.testJUnit([resFile: "test-result-common.${NODE_NAME}.xml", testDir: 'indy_common'])
        }
    }
    finally {
        echo 'Ubuntu Test: Cleanup'
        step([$class: 'WsCleanup'])
    }
}

def buildDebUbuntu = { repoName, releaseVersion, sourcePath ->
    def volumeName = "$name-deb-u1604"
    if (env.BRANCH_NAME != '' && env.BRANCH_NAME != 'master') {
        volumeName = "${volumeName}.${BRANCH_NAME}"
    }
    if (sh(script: "docker volume ls -q | grep -q '^$volumeName\$'", returnStatus: true) == 0) {
        sh "docker volume rm $volumeName"
    }
    dir('build-scripts/ubuntu-1604') {
        sh "./build-$name-docker.sh \"$sourcePath\" $releaseVersion $volumeName"
        sh "./build-3rd-parties-docker.sh $volumeName"
    }
    return "$volumeName"
}

def systemTests = { component ->
    node("ubuntu") {
        checkout scm

        try {
            dir("environment/docker/pool"){ 
                stage("Patch core dockerfile") {
                    sh """
                        sed -i 's/repo.sovrin.org\\/deb xenial .*\\+"/repo.sovrin.org\\/deb xenial $component"/g' core.ubuntu.dockerfile
                        sed -i 's/sdk\\/deb xenial .\\+"/sdk\\/deb xenial stable"/g' core.ubuntu.dockerfile
                        sed -i 's/\\(RUN pip3 install python3-indy\\)/& pytest/g' core.ubuntu.dockerfile
                    """
                }
                
                stage("Run pool") {
                    sh './pool_start.sh 25'
                    
                    echo "System Tests ($component): Running nodes..."
                    pool_nodes = sh(script: 'docker ps', returnStdout: true)
                    echo "System Tests ($component): pool_nodes"
                }
            
                stage("Prepare and run client") {
                    sh '''
                        sed -i 's/\\(docker exec -it\\)/#&/g' client_start.sh'
                        ./client_for_pool_start.sh
                    '''
                }
            } //end dir
            
            stage("Prepare tests") {
                testHelpers.getSystemTests(targetDir: './system_tests')
                sh '''
                    docker cp ./system_tests/system indyclient:/home/indy
                    docker exec -t --user indy indyclient cp /var/lib/indy/sandbox/pool_transactions_genesis /home/indy/system
                '''
            }

            String testReportFileName = "system_tests_report.xml"
            try {
                stage("Run tests") {
                    dir("environment/docker/pool"){
                        sh """
                            docker exec -t --user indy indyclient bash -c "cd /home/indy/system && pytest --junit-xml=./reports/$testReportFileName test_ledger.py"
                        """
                    }
                }
            } finally {

                stage("Upload test teports") {
                    sh "mkdir -p system_tests/reports"

                    dir("system_tests/reports"){
                        sh "docker cp indyclient:/home/indy/system/reports/$testReportFileName ./"
                        archiveArtifacts artifacts: testReportFileName, allowEmptyArchive: true
                        junit testReportFileName
                    }
                }
            }
            
        } catch (Exception exc) {
            echo "System Tests ($component): Catch the exception ${exc.getMessage()}"
            echo "System Tests ($component): Stack trace:"
            echo "{exc.getStackTrace()}"
        } finally {
            stage('Cleanup') {
                try {
                    sh '''
                        docker stop $(docker ps -a -q)
                        docker network rm pool-network
                    '''
                } catch (Exception ex) {
                    // pass
                }

                wsCleanup()
            }
        }
    }
}

options = new TestAndPublishOptions()

// FIXME: Remove after tests
env.BRANCH_NAME = 'master'
options.skip([
    StagesEnum.IS_TESTED, 
    StagesEnum.STATIC_CODE_VALIDATION, 
    StagesEnum.TEST, 
    StagesEnum.AUTOMERGE, 
    StagesEnum.GET_RELEASE_VERSION, 
    StagesEnum.PYPI_RELEASE,
    StagesEnum.PACK_RELEASE, 
    StagesEnum.PACK_RELEASE_COPY, 
    StagesEnum.GITHUB_RELEASE,
    StagesEnum.QA_NOTIF, 
    StagesEnum.QA_APPROVAL, 
    StagesEnum.PRODUCT_NOTIF, 
    StagesEnum.PRODUCT_APPROVAL, 
    StagesEnum.TGB_NOTIF, 
    StagesEnum.TGB_APPROVAL, 
    StagesEnum.PACK_RELEASE_ST,
    StagesEnum.PACK_RELEASE_COPY_ST, 
    StagesEnum.GITHUB_RELEASE_ST, 
    StagesEnum.POOL_UPDATE_NOTIF, 
    StagesEnum.BUILD_RESULT_NOTIF,
    ])

//options.enable([StagesEnum.PACK_RELEASE_COPY, StagesEnum.PACK_RELEASE_COPY_ST])
options.setCopyWithDeps(true)
options.setSystemTestsCb(systemTests)
options.setPrContexts([env.INDY_GITHUB_PR_REQUIRED_CONTEXT ?: "ci/hyperledger-jenkins/pr-merge"])

testAndPublish(name, [ubuntu: [node: nodeTestUbuntu, common: commonTestUbuntu]], true, options, [ubuntu: buildDebUbuntu])
