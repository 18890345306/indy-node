#!/usr/bin/env groovy

/*
 * This Jenkinsfile is intended to run on https://ci.evernym.com and may fail anywhere else.
 *
 * Environment requirements:
 *  - environment variable:
 *      - INDY_AGENT_LINUX_DOCKER_LABEL: label for agents with ability
 *          to run linux docker containers
 *      - (optional) INDY_AGENT_WINDOWS_LABEL: label for windows agents
 *  - agents:
 *      - linux:
 *          - docker
 *      - windows:
 *          - python3.5 + virtualenv
 *          - cygwin
 */

name = 'indy-node'

library identifier: 'indy@feature/INDY-997_public-lib', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'git@github.com:evernym/jenkins-shared.git',
    credentialsId: 'evernym-github-machine-user-token'
])


def config = [
    codeValidation: false,
    runTests: true,
    failFast: false,
    sendNotif: false
]


// TODO enable windows
def labels = [
    linux: env.INDY_AGENT_LINUX_DOCKER_LABEL ?: 'linux'
]

if (env.INDY_AGENT_WINDOWS_LABEL) {
    labels[windows] = env.INDY_AGENT_WINDOWS_LABEL
}

def staticCodeValidation() {
    try {
        echo 'Static code validation'
        checkout scm

        buildDocker('code-validation', 'ci/code-validation.dockerfile ci').inside {
            sh "python3 -m flake8"
        }
    }
    finally {
        echo 'Static code validation: Cleanup'
        step([$class: 'WsCleanup'])
    }
}


def tests = [
    common: {
        imgName: "hyperledger/indy-node-ci",
        dockerfile: "ci/ubuntu.dockerfile",
        contextDir: "ci",
        resFile: "test-result-common.${NODE_NAME}.xml",
        testDir: 'indy_common',
        python: python
    }
    /*
    client: { python ->
        test(
            resFile: "test-result-client.${NODE_NAME}.txt",
            testDir: 'indy_client',
            python: python,
            useRunner: true
        )
    },
    node: { python ->
        test(
            resFile: "test-result-node.${NODE_NAME}.txt",
            testDir: 'indy_node',
            python: python,
            useRunner: true
        )
    },
    */
].collect {k, v -> [k, v]}


// PIPELINE

try {
    timeout(60) {
        stage('Static code validation') {
            if (config.codeValidation) {
                node(labels.linux) {
                    staticCodeValidation()
                }
            }
        }
        stage('Build / Test') {
            if (config.runTests) {
                verify {
                    labels = labels
                    tests = tests
                    failFast = config.failFast
                }
            }
        }
        currentBuild.result = 'SUCCESS'
    }
} catch (Exception err) {
    println(err.toString())
    currentBuild.result = 'FAILURE'
} finally {
    stage('Build result notification') {
        if (config.sendNotif) {
            def emailMessage = [
                body: '$DEFAULT_CONTENT',
                replyTo: '$DEFAULT_REPLYTO',
                subject: '$DEFAULT_SUBJECT',
                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']]
            ]
            emailext emailMessage
        }
    }
}
