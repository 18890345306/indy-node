#!/usr/bin/env groovy

/*
 * This Jenkinsfile is intended to run on https://ci.evernym.com and may fail anywhere else.
 *
 * Environment requirements:
 *  - environment variable:
 *      - INDY_AGENT_LINUX_DOCKER_LABEL: label for agents with ability
 *          to run linux docker containers
 *      - (optional) INDY_AGENT_WINDOWS_LABEL: label for windows agents
 *  - agents:
 *      - linux:
 *          - docker
 *      - windows:
 *          - python3.5 + virtualenv
 *          - cygwin
 */

name = 'indy-node'

library identifier: 'indy@feature/INDY-997_public-lib', retriever: modernSCM(
    github(credentialsId: 'evernym-github-machine-user', repoOwner: 'evernym', repository: 'jenkins-shared')
)

// TODO enable windows
labels = [
    linux: params.INDY_AGENT_LINUX_DOCKER_LABEL ?: 'linux'
]

if (params.INDY_AGENT_WINDOWS_LABEL) {
    labels[windows] = params.INDY_AGENT_WINDOWS_LABEL
}

def locallib
node(labels.linux) {
    stage('Load local lib') {
        checkout scm
        locallib = load 'pipeline.groovy'
    }
}

config = locallib.init()
log.info("parameters: $config")

env.DRY_RUN = "Y"


def buildDebUbuntu = { releaseVersion, sourcePath ->
    def volumeName = "$name-deb-u1604"
    if (env.BRANCH_NAME && env.BRANCH_NAME != 'master') {
        volumeName = "${volumeName}.${env.BRANCH_NAME}"
    }
    if (sh(script: "docker volume ls -q | grep -q '^$volumeName\$'", returnStatus: true) == 0) {
        sh "docker volume rm $volumeName"
    }
    dir('build-scripts/ubuntu-1604') {
        sh "./build-$name-docker.sh \"$sourcePath\" $releaseVersion $volumeName"
        sh "./build-3rd-parties-docker.sh $volumeName"
    }
    return "$volumeName"
}


// PIPELINE

try {
    timeout(60) {

        // TODO skip testing if isTested
        if (config.common.stages.indyIsTested) {
            indyIsTested {
                node = this.labels.linux
                branch = 'master'
            }
        }

        if (config.common.stages.indyVerify) {
            verify {
                labels = this.labels
                dockers = this.config.local.dockers
                tests = this.config.local.tests
                failFast = this.config.common.failFast
            }
        }

        if (config.common.stages.indyVerifyStatic) {
            verifyStatic {
                dockerEnv = [
                    imgName: "code-validation",
                    dockerfile: "ci/code-validation.dockerfile",
                    contextDir: "ci"
                ]
                nodeLabel = this.labels.linux
            }
        }

        if (config.common.stages.indyAutoMerge) {
            indyAutoMerge {
                node = this.labels.linux
                credentialsId = this.config.common.credentials.gitHub.token // 'evernym-github-machine-user-token' //TODO from env
            }
        }

        def releaseVersion
        if (config.common.stages.indyGetReleaseVersion) {
            releaseVersion = indyGetReleaseVersion {
                node = this.labels.linux
            }
        }
        releaseVersion = "0.0.0.${BUILD_NUMBER}"

        if (config.common.stages.indyPublishPypi) {
            indyPublishPypi {
                node = this.labels.linux
                version = releaseVersion
                credentialsId = this.config.common.credentials.pypi //'pypi_credentials' // TODO from env
            }
        }

        if (config.common.stages.indyPublishPackages) {
            indyPublishPackages {
                node = this.labels.linux
                version = releaseVersion
                credentialsIdGitHub = this.config.common.credentials.gitHub.userToken // 'evernym-github-machine-user'
                deb.host = this.config.common.aptRepo.host
                deb.credentialsId = this.config.common.aptRepo.sshKey // 'SovrinRepoSSHKey'
                deb.repo = this.config.common.aptRepo.name // env.SOVRIN_CORE_REPO_NAME
                deb.component = 'master-latest'
                logLevel = this.config.common.logLevel
                // packaging options
                builders.deb = buildDebUbuntu
            }
        }

        if (config.common.stages.indyPublishGitHub) {
            indyPublishGitHub {
                node = this.labels.linux
                version = releaseVersion
                credentialsId = this.config.common.credentials.gitHub.sshKey // 'id_rsa.evernym-ci' // TODO from env
                versionPostfix = 'testtt'
            }
        }

        currentBuild.result = 'SUCCESS'
    }
} catch (Exception err) {
    println(err.toString())
    currentBuild.result = 'FAILURE'
} finally {
    stage('Build result notification') {
        if (config.common.stages.indySendNotif) {
            def emailMessage = [
                body: '$DEFAULT_CONTENT',
                replyTo: '$DEFAULT_REPLYTO',
                subject: '$DEFAULT_SUBJECT',
                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']]
            ]
            emailext emailMessage
        }
    }
}
